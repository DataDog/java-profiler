name: CI Run

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - v*
  pull_request:

jobs:
  check-for-pr:
    runs-on: ubuntu-latest
    if: endsWith(github.repository, 'java-profiler-library')
    outputs:
      skip: ${{ steps.check.outputs.skip }}
    steps:
    - name: Check if PR exists
      id: check
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ -z "${{ github.base_ref }}" ]; then
          prs=$(gh pr list \
              --repo "$GITHUB_REPOSITORY" \
              --json baseRefName,headRefName \
              --jq '
                  map(select(.baseRefName == "${{ github.base_ref }}" and .headRefName == "${{ github.head_ref }}"))
                  | length
              ')
          if ((prs > 0)); then
              echo "skip=true" >> "$GITHUB_OUTPUT"
          fi
        fi

  cpp-check: 
    runs-on: ubuntu-latest
    needs: check-for-pr
    if: endsWith(github.repository, 'java-profiler-library') && !needs.check-for-pr.outputs.skip
    steps:
      - uses: actions/checkout@v3
      - name: Setup
        run: sudo apt -y update && sudo apt -y install cppcheck
      - name: Check
        run: make cppcheck

  build-linux-glibc:
    runs-on: ubuntu-latest
    needs: check-for-pr
    if: endsWith(github.repository, 'java-profiler-library') && !needs.check-for-pr.outputs.skip
    steps:
      - uses: actions/checkout@v3
      - name: Clean
        run: make clean
      - name: Build
        run: mvn package -DskipTests
      - name: Upload temp build artifact
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: glibc-build
          path: .

  build-linux-musl:
    runs-on: ubuntu-latest
    needs: check-for-pr
    if: endsWith(github.repository, 'java-profiler-library') && !needs.check-for-pr.outputs.skip

    container:
      image: "bellsoft/liberica-openjdk-alpine-musl:11.0.17"
      options: --cpus 2

    steps:
      - uses: actions/checkout@v3
      - name: Setup system
        run: apk update && apk add curl moreutils wget hexdump linux-headers bash make g++ git maven cppcheck jq >/dev/null
      - name: Clean
        run: make clean
      - name: Build
        run: mvn package -DskipTests
      - name: Upload temp build artifact
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: musl-build
          path: .

  test-linux-glibc:
    needs: build-linux-glibc
    strategy:
      matrix:
        java_version: [8u362+9, 11.0.18+10, 17.0.6+10, 20+37]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: glibc-build
      - name: Prepare JDK ${{ matrix.java_version }}
        run: |
            wget -nv https://download.bell-sw.com/java/${{ matrix.java_version }}/bellsoft-jdk${{ matrix.java_version }}-linux-amd64.tar.gz -O jdk.tar.gz
            tar xzf *.tar.gz
            find . -type d -name 'jdk*' -maxdepth 1| xargs -I {} mv {} test_jdk
      - name: Test
        run: |
          export TEST_CONFIGURATION=glibc/${{ matrix.java_version }}
          export JAVA_HOME=$(pwd)/test_jdk
          export PATH=$JAVA_HOME/bin:$PATH
          chmod a+x test/*.sh 
          ./test/test-all.sh
      - name: Upload logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: hs_err_files.zip
          path: hs_err_*
      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: x64-glibc
          path: build/

  test-linux-glibc-j9:
    needs: build-linux-glibc
    strategy:
      matrix:
        java_version: [8, 11, 17,]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/setup-java@v3
        with:
          distribution: 'adopt-openj9'
          java-version: "${{ matrix.java_version }}"
      - uses: actions/download-artifact@v2
        with:
          name: glibc-build
      - name: Test
        run: |
          export TEST_CONFIGURATION=glibc/${{ matrix.java_version }}
          chmod a+x test/*.sh 
          ./test/test-all.sh
      - name: Upload logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: hs_err_files.zip
          path: hs_err_*
      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: x64-glibc-j9
          path: build/

  test-linux-musl:
    needs: build-linux-musl
    strategy:
      matrix:
        java_version: [8u362+9, 11.0.18+10, 17.0.6+10, 20+37]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    container:
      image: "bellsoft/liberica-openjdk-alpine-musl:11.0.17"
      options: --cpus 2
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: musl-build
      - name: Setup system
        run: apk update && apk add curl moreutils wget hexdump linux-headers bash make g++ git maven cppcheck jq >/dev/null
      - name: Prepare JDK ${{ matrix.java_version }}
        run: |
            wget -nv https://download.bell-sw.com/java/${{ matrix.java_version }}/bellsoft-jdk${{ matrix.java_version }}-linux-x64-musl.tar.gz -O jdk.tar.gz
            tar xzf *.tar.gz
            find . -type d -name 'jdk*' -maxdepth 1 | xargs -I {} mv {} test_jdk
      - name: Test
        run: |
          export TEST_CONFIGURATION=musl/${{ matrix.java_version }}
          export JAVA_HOME=$(pwd)/test_jdk
          export PATH=$JAVA_HOME/bin:$PATH
          chmod a+x test/*.sh
          ./test/test-all.sh
      - name: Upload logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: reports.zip
          path: |
            hs_err_*
            target/surefire-reports/
      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: x64-musl
          path: build/

  merge-upstream:
    if: startsWith(github.event.ref, 'refs/heads/release/') && endsWith(github.repository, 'java-profiler-library')
    runs-on: ubuntu-latest
    needs: [test-linux-musl, test-linux-glibc]
    steps:
      - name: Upstream release
        uses: ./.github/workflows/upstream.yml@merge-upstream
        with:
          release_branch: ${GITHUB_REF_NAME}

name: CI Run

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - v*
  pull_request:

jobs:
  check-for-pr:
    runs-on: ubuntu-latest
    if: endsWith(github.repository, 'java-profiler-library')
    outputs:
      skip: ${{ steps.check.outputs.skip }}
    steps:
      - name: Check if PR exists
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -z "${{ github.base_ref }}" ]; then
            prs=$(gh pr list \
                --repo "$GITHUB_REPOSITORY" \
                --json baseRefName,headRefName \
                --jq '
                    map(select(.baseRefName == "${{ github.base_ref }}" and .headRefName == "${{ github.head_ref }}"))
                    | length
                ')
            if ((prs > 0)); then
                echo "skip=true" >> "$GITHUB_OUTPUT"
            fi
          fi

  test-linux-glibc:
    needs: check-for-pr
    if: endsWith(github.repository, 'java-profiler-library') && !needs.check-for-pr.outputs.skip
    strategy:
      matrix:
        java_version: [8u362+9, 11.0.18+10, 17.0.6+10]
    runs-on: ubuntu-latest
    timeout-minutes: 180
    steps:
      - uses: actions/checkout@v3
      - name: Prepare build JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: "11"
      - name: Prepare JDK ${{ matrix.java_version }}
        run: |
          wget -nv https://download.bell-sw.com/java/${{ matrix.java_version }}/bellsoft-jdk${{ matrix.java_version }}-linux-amd64.tar.gz -O jdk.tar.gz
          tar xzf *.tar.gz
          find . -type d -name 'jdk*' -maxdepth 1| xargs -I {} mv {} test_jdk
      - name: Test
        run: |
          export TEST_CONFIGURATION=glibc/${{ matrix.java_version }}
          export JAVA_TEST_HOME=$(pwd)/test_jdk
          chmod a+x ddprof-lib/test.sh
          ./gradlew :ddprof-test:test --info
      - name: Upload logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: reports-linux-glibc-${{ matrix.java_version }}.zip
          path: |
            ddprof-test/hs_err_*
            ddprof-test/build/reports/tests
            ddprof-lib/src/test/build/Testing/Temporary/LastTest.log
      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: x64-glibc
          path: build/

  test-linux-glibc-j9:
    needs: check-for-pr
    if: endsWith(github.repository, 'java-profiler-library') && !needs.check-for-pr.outputs.skip
    strategy:
      matrix:
        java_version: [8, 11, 17]
    runs-on: ubuntu-latest
    timeout-minutes: 180
    steps:
      - uses: actions/checkout@v3
      - name: Prepare test JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt-openj9'
          java-version: "${{ matrix.java_version }}"
      - name: Store JAVA_TEST_HOME
        run: JAVA_PATH=$(which java) && echo "JAVA_TEST_HOME=${JAVA_PATH/\/bin\/java/\/}" >> $GITHUB_ENV
      - name: Prepare build JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt-openj9'
          java-version: "11"
      - name: Test
        run: |
          export TEST_CONFIGURATION=glibc/${{ matrix.java_version }}
          chmod a+x gradlew
          chmod a+x ddprof-lib/test.sh
          ./gradlew :ddprof-test:test --info
      - name: Upload logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: reports-linux-glibc-j9-${{ matrix.java_version }}.zip
          path: |
            ddprof-test/hs_err_*
            ddprof-test/build/reports/tests
            ddprof-lib/src/test/build/Testing/Temporary/LastTest.log
      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: x64-glibc-j9
          path: build/

  test-linux-musl:
    needs: check-for-pr
    if: endsWith(github.repository, 'java-profiler-library') && !needs.check-for-pr.outputs.skip
    strategy:
      matrix:
        java_version: [8u362+9, 11.0.18+10, 17.0.6+10]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    container:
      image: "bellsoft/liberica-openjdk-alpine-musl:11.0.17"
      options: --cpus 2
    steps:
      - uses: actions/checkout@v3
      - name: Setup system
        run: apk update && apk add curl moreutils wget hexdump linux-headers bash make g++ clang git cppcheck jq cmake >/dev/null
      - name: Prepare build JDK
        run: |
          wget -nv https://download.bell-sw.com/java/11.0.18+10/bellsoft-jdk11.0.18+10-linux-x64-musl.tar.gz -O jdk.tar.gz
          tar xzf *.tar.gz
          find . -type d -name 'jdk*' -maxdepth 1 | xargs -I {} mv {} build_jdk
      - name: Prepare JDK ${{ matrix.java_version }}
        run: |
          wget -nv https://download.bell-sw.com/java/${{ matrix.java_version }}/bellsoft-jdk${{ matrix.java_version }}-linux-x64-musl.tar.gz -O jdk.tar.gz
          tar xzf *.tar.gz
          find . -type d -name 'jdk*' -maxdepth 1 | xargs -I {} mv {} test_jdk
      - name: Test
        run: |
          export JAVA_HOME=$(pwd)/build_jdk
          export PATH=$JAVA_HOME/bin:$PATH
          export TEST_CONFIGURATION=musl/${{ matrix.java_version }}
          export JAVA_TEST_HOME=$(pwd)/test_jdk
          chmod a+x ddprof-lib/test.sh
          ./gradlew :ddprof-test:test --info
      - name: Upload logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: reports-linux-musl-${{ matrix.java_version }}.zip
          path: |
            ddprof-test/hs_err_*
            ddprof-test/build/reports/tests
            ddprof-lib/src/test/build/Testing/Temporary/LastTest.log
      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: x64-musl
          path: build/

  merge-upstream:
    if: startsWith(github.event.ref, 'refs/heads/release/') && endsWith(github.repository, 'java-profiler-library')
    runs-on: ubuntu-latest
    needs: [test-linux-musl, test-linux-glibc, test-linux-glibc-j9]
    steps:
      - name: Upstream release
        uses: ./.github/workflows/upstream.yml@merge-upstream
        with:
          release_branch: ${GITHUB_REF_NAME}

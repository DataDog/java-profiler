name: Automated Release
run-name: "${{ inputs.dry_run && 'Dry-run for ' || 'Preform ' }} ${{ inputs.release_type }} release of ${{ github.ref }} branch"

on: 
  workflow_dispatch:
    inputs:
      release_type:
        type: choice
        description: The release type
        options:
          - "major"
          - "minor"
          - "patch"
        default: "minor"
      dry_run:
        description: Perform the release dry-run
        required: true 
        type: boolean
        default: true


jobs:
  release-branch:
    runs-on: ubuntu-latest
    if: endsWith(github.repository, 'java-profiler-library')
    steps:
      - name: Output Inputs
        run: |
          echo "${{ toJSON(github.event.inputs) }}"
          echo "${{ toJSON(inputs) }}"
          echo "${{ inputs.release_type }}"
      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PUSH_SECRET }}
      - name: Checkout ${{ env.GITHUB_REPOSITORY }}
        run: git clone git@github.com:$GITHUB_REPOSITORY.git java-profiler
      - name: Configure git env
        run: |
          git config --global user.email "java-profiler@datadoghq.com"
          git config --global user.name "Datadog Java Profiler"
      - name: Create release
        run: |
          if [ "${{ inputs.release_type }}" != "patch" ]&& [[ ${GITHUB_REF_NAME} =~ release/.* ]]; then
            echo "::error Only patch release can be performed from a release branch"
            exit 1
          fi
          if [ "${{ inputs.release_type }}" == "patch" ]&& [[ ! ${GITHUB_REF_NAME} =~ release/.* ]]; then
            echo "::error::A patch release can be performed only from a release branch"
            exit 1
          fi
          if [ "${{ inputs.dry_run }}" == "true" ]; then
            DRY_RUN="--dry-run"
          fi

          cd java-profiler
          git checkout $GITHUB_REF_NAME
          # version = 0.1.0-SNAPSHOT
          if [ "${{ inputs.release_type }}" == "major" ]; then
            ./gradlew markNextVersion -Prelease.incrementer=incrementMajor
            # version = 1.0.0-SNAPSHOT
          elif [ "${{ inputs.release_type }}" == "patch" ]; then
            ./gradlew markNextVersion -Prelease.incrementer=incrementPatch
            # version = 0.1.1-SNAPSHOT
          fi
          CURRENT_VERSION=$(./gradlew createRelease | grep 'Creating tag' | cut -f2 -d'_')
          git checkout -b release/$CURRENT_VERSION
          git push $DRY_RUN --atomic --set-upstream origin release/$CURRENT_VERSION
          git push $DRY_RUN --atomic --tags
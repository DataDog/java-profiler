#!/usr/bin/env bash
set -euo pipefail

mkdir -p build/logs build/reports/claude .claude/out
STAMP="$(date +%Y%m%d-%H%M%S)"

# Args (default to 'build')
ARGS=("$@")
if [ "${#ARGS[@]}" -eq 0 ]; then
  ARGS=(build)
fi

# Label for the log file from the first arg
LABEL="$(printf '%s' "${ARGS[0]}" | tr '/:' '__')"
LOG="build/logs/${STAMP}-${LABEL}.log"

# Ensure we clean the tail on exit
tail_pid=""
cleanup() { [ -n "${tail_pid:-}" ] && kill "$tail_pid" 2>/dev/null || true; }
trap cleanup EXIT INT TERM

echo "▶ Logging full Gradle output to: $LOG"
echo "▶ Running: ./gradlew ${ARGS[*]} -i --console=plain"
echo "   (Console output here is minimized; the full log is in the file.)"
echo

# Start Gradle fully redirected to the log (no stdout/stderr to this session)
# Use stdbuf to make the output line-buffered in the log for timely tailing.
( stdbuf -oL -eL ./gradlew "${ARGS[@]}" -i --console=plain ) >"$LOG" 2>&1 &
gradle_pid=$!

# Minimal live progress: follow the log and print only interesting lines
#  - Task starts
#  - Final build status
#  - Test summary lines
tail -n0 -F "$LOG" | awk '
  /^> Task / { print; fflush(); next }
  /^BUILD (SUCCESSFUL|FAILED)/ { print; fflush(); next }
  /[0-9]+ tests? (successful|failed|skipped)/ { print; fflush(); next }
' &
tail_pid=$!

# Wait for Gradle to finish
wait "$gradle_pid"
status=$?

# Stop the tail and print a compact summary from the log
kill "$tail_pid" 2>/dev/null || true
tail_pid=""

echo
echo "=== Summary ==="
# Grab the last BUILD line and nearest test summary lines
awk '
  /^BUILD (SUCCESSFUL|FAILED)/ { lastbuild=$0 }
  /[0-9]+ tests? (successful|failed|skipped)/ { tests=$0 }
  END {
    if (lastbuild) print lastbuild;
    if (tests) print tests;
  }
' "$LOG" || true

echo
if [ $status -eq 0 ]; then
  echo "✔ Gradle completed. Full log at: $LOG"
else
  echo "✖ Gradle failed with status $status. Full log at: $LOG"
fi

# Hand over to your logs analyst agent — keep the main session output tiny.
echo
echo "Delegating to gradle-logs-analyst agent…"
# If your CLI supports non-streaming, set it here to avoid verbose output.
# Example (uncomment if supported): export CLAUDE_NO_STREAM=1
claude "Act as the gradle-logs-analyst agent to parse the build log at: $LOG. Generate the required Gradle summary artifacts as specified in the gradle-logs-analyst agent definition."